import streamlit as st
import os
import tempfile
import subprocess
from pydub import AudioSegment
from openai import OpenAI
from datetime import datetime

# ----------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ CSS -----------------------
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

def load_css():
    st.markdown("""
        <style>
        /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω */
        .stApp {
            background-color: #E5E7EB;
        }
        
        /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
        .element-container, div.stButton, div.stDownloadButton {
            background-color: #F3F4F6;
            padding: 0.5rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        /* –ö–Ω–æ–ø–∫–∏ */
        .stButton>button {
            width: 100%;
            background-color: #1e3a8a;
            color: white;
            border: none;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
        }
        .stButton>button:hover {
            background-color: #1e40af;
        }

        /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
        .header-container {
            display: flex;
            align-items: center;
            padding: 1.5rem;
            background-color: #1e3a8a;
            color: white;
            border-radius: 0.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ */
        .uploadedFile {
            border: 2px solid #D1D5DB;
            border-radius: 0.5rem;
            padding: 1rem;
            background-color: #F9FAFB;
        }

        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ */
        .stTextArea textarea {
            background-color: #F9FAFB;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
        }

        /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */
        .stAlert {
            background-color: #F9FAFB;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
        }
        
        /* –°—Ç–∞—Ç—É—Å –±–∞—Ä */
        .stStatusWidget {
            background-color: #F9FAFB;
            border: 1px solid #D1D5DB;
            border-radius: 0.375rem;
            padding: 1rem;
        }
        </style>
    """, unsafe_allow_html=True)

# ----------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI -----------------------
def init_openai():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI. API-–∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ st.secrets.
        return OpenAI(api_key=st.secrets["openai_api_key"])
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI API: " + str(e))
        return None

# ----------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ -----------------------
def generate_case_number():
    now = datetime.now()
    return f"–ú-{now.strftime('%Y%m%d')}-{now.strftime('%H%M%S')}"

# ----------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg -----------------------
def check_ffmpeg():
    try:
        subprocess.run(["ffmpeg", "-version"], check=True, capture_output=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

# ----------------------- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ -----------------------
def extract_audio(uploaded_file):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as tmpfile:
        tmpfile.write(uploaded_file.read())
        video_path = tmpfile.name

    audio_path = os.path.splitext(video_path)[0] + '.mp3'
    
    try:
        subprocess.run([
            "ffmpeg", 
            "-i", video_path, 
            "-q:a", "0",
            "-map", "a", 
            audio_path
        ], check=True, capture_output=True)
        
        audio = AudioSegment.from_mp3(audio_path)
        duration = len(audio) / 1000  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        return audio_path, duration
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        raise
    finally:
        if os.path.exists(video_path):
            os.remove(video_path)

# ----------------------- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ -----------------------
def transcribe_audio(client, audio_file, language='ru'):
    try:
        with open(audio_file, "rb") as file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=file,
                language=language
            )
        return transcript.text
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        raise
    finally:
        if os.path.exists(audio_file):
            os.remove(audio_file)

# ----------------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ -----------------------
# –ó–¥–µ—Å—å –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ä–æ–ª—å —Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π.

def summarize_text(client, text, language='ru'):
    prompt = (
        f"–í —Ä–∞–º–∫–∞—Ö —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–π. –°—É–º–º–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ {language}:\n\n"
        f"{text}\n\n"
        "–î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π."
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "developer", "content": "–í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
        )
        summary = response.choices[0].message.content.strip()
        return summary
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return ""

def check_sequence(client, text):
    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è –∏ "
        "–≤—ã–¥–µ–ª–∏—Ç–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —à–∞–≥–∏, –≤–∞–∂–Ω—ã–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n\n" + text
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "developer", "content": "–í—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
        )
        analysis = response.choices[0].message.content.strip()
        return analysis
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
        return ""

def extract_key_facts(client, text):
    prompt = (
        "–ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –∏–º–µ—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n\n"
        + text
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "developer", "content": "–í—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –≤—ã–¥–µ–ª—è—é—â–∏–π —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–∏–Ω—ã."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
        )
        key_facts = response.choices[0].message.content.strip()
        return key_facts
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤: {str(e)}")
        return ""

def check_contradictions(client, text1, text2):
    prompt = (
        "–°—Ä–∞–≤–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n\n"
        "–ü–æ–∫–∞–∑–∞–Ω–∏—è –ª–∏—Ü–∞ ‚Ññ1:\n" + text1 + "\n\n"
        "–ü–æ–∫–∞–∑–∞–Ω–∏—è –ª–∏—Ü–∞ ‚Ññ2:\n" + text2
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "developer", "content": "–í—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
        )
        contradictions = response.choices[0].message.content.strip()
        return contradictions
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: {str(e)}")
        return ""

def formulate_questions(client, contradictions):
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π, –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ —Å–≤–µ–¥–µ–Ω–∏–π:\n\n"
        + contradictions
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "developer", "content": "–í—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
        )
        questions = response.choices[0].message.content.strip()
        return questions
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
        return ""

# ----------------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -----------------------
def main():
    load_css()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg
    if not check_ffmpeg():
        st.error("FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ.")
        st.stop()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
        <div class="header-container">
            <h1 style="margin:0; color:white;">üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</h1>
        </div>
    """, unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
    client = init_openai()
    if not client:
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        uploaded_file_1 = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ1",
            key="face1",
            type=["mp4", "avi", "mov", "mp3", "wav"],
        )
        uploaded_file_2 = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ2",
            key="face2",
            type=["mp4", "avi", "mov", "mp3", "wav"],
        )
    with col2:
        st.markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ")
        case_number = st.text_input(
            "–ù–æ–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            value=generate_case_number(),
            disabled=True
        )
        language = st.selectbox(
            "–Ø–∑—ã–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            options=["ru", "kk", "en"],
            format_func=lambda x: {
                "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
                "kk": "üá∞üáø “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ",
                "en": "üá¨üáß English"
            }[x]
        )

    st.markdown("---")
    st.info(
        "‚ÑπÔ∏è –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
        "–§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )

    if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        transcription1 = transcription2 = ""
        summary1 = summary2 = ""
        sequence_check1 = sequence_check2 = ""
        key_facts1 = key_facts2 = ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1
        if uploaded_file_1:
            st.markdown("### –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ1")
            try:
                with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1..."):
                    audio_path1, duration1 = extract_audio(uploaded_file_1)
                    st.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {int(duration1)} —Å–µ–∫.")
                with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ1..."):
                    transcription1 = transcribe_audio(client, audio_path1, language)
                with st.spinner("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ1..."):
                    summary1 = summarize_text(client, transcription1, language)
                with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1..."):
                    sequence_check1 = check_sequence(client, transcription1)
                with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1..."):
                    key_facts1 = extract_key_facts(client, transcription1)
            except Exception as e:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ª–∏—Ü–∞ ‚Ññ1: " + str(e))
        else:
            st.warning("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2
        if uploaded_file_2:
            st.markdown("### –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ2")
            try:
                with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2..."):
                    audio_path2, duration2 = extract_audio(uploaded_file_2)
                    st.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {int(duration2)} —Å–µ–∫.")
                with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ2..."):
                    transcription2 = transcribe_audio(client, audio_path2, language)
                with st.spinner("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ª–∏—Ü–∞ ‚Ññ2..."):
                    summary2 = summarize_text(client, transcription2, language)
                with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2..."):
                    sequence_check2 = check_sequence(client, transcription2)
                with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2..."):
                    key_facts2 = extract_key_facts(client, transcription2)
            except Exception as e:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ª–∏—Ü–∞ ‚Ññ2: " + str(e))
        else:
            st.warning("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1
        if transcription1:
            st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª–∏—Ü–∞ ‚Ññ1")
            st.text_area("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ª–∏—Ü–∞ ‚Ññ1", value=transcription1, height=200)
            st.text_area("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ª–∏—Ü–∞ ‚Ññ1", value=summary1, height=100)
            st.text_area("–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞ ‚Ññ1", value=sequence_check1, height=100)
            st.text_area("–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –ª–∏—Ü–∞ ‚Ññ1", value=key_facts1, height=100)
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ª–∏—Ü–∞ ‚Ññ1",
                data=transcription1,
                file_name=f"–ü—Ä–æ—Ç–æ–∫–æ–ª_–ª–∏—Ü–æ1_{case_number}.txt",
                mime="text/plain"
            )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2
        if transcription2:
            st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª–∏—Ü–∞ ‚Ññ2")
            st.text_area("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ª–∏—Ü–∞ ‚Ññ2", value=transcription2, height=200)
            st.text_area("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ª–∏—Ü–∞ ‚Ññ2", value=summary2, height=100)
            st.text_area("–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞ ‚Ññ2", value=sequence_check2, height=100)
            st.text_area("–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –ª–∏—Ü–∞ ‚Ññ2", value=key_facts2, height=100)
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ª–∏—Ü–∞ ‚Ññ2",
                data=transcription2,
                file_name=f"–ü—Ä–æ—Ç–æ–∫–æ–ª_–ª–∏—Ü–æ2_{case_number}.txt",
                mime="text/plain"
            )

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–±–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if transcription1 and transcription2:
            st.markdown("## –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏")
            with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏..."):
                contradictions = check_contradictions(client, transcription1, transcription2)
            with st.spinner("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π..."):
                questions = formulate_questions(client, contradictions)
            st.text_area("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è", value=contradictions, height=150)
            st.text_area("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", value=questions, height=150)

    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
        <div style="text-align:center; padding:1rem; background-color:#F3F4F6; 
                    border-radius:0.5rem; margin-top:2rem;">
            <p style="color:#6B7280; margin:0;">
                ¬© 2024 –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. 
                –í–µ—Ä—Å–∏—è 1.0.0
            </p>
        </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
